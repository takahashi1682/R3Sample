問1
Observable.Interval(TimeSpan.FromSeconds(1))
    .Subscribe(_ => _health.Sub(100)).AddTo(this);
問2                
_damage.Subscribe(x => _health.Sub(x)).AddTo(this);
_recovery.Subscribe(x => _health.Add(x)).AddTo(this);

問3
.ThrottleFirst(TimeSpan.FromSeconds(1))

問4
.Select(x => x * 3)

問5
[SerializeField] private SerializableReactiveProperty<int> _count = new(1000);

問6
Observable.Interval(TimeSpan.FromSeconds(1))
    .Subscribe(_ =>
    {
        var pos = new Vector3(Random.Range(-3.0f, 3.0f), Random.Range(-3.0f, 3.0f));
        Instantiate(_cubePrefab, pos, Quaternion.identity);
    }).AddTo(this);
問7
using UnityEngine;
using R3;

namespace Projects._99_Challenge.チャレンジ問題7
{
    public class CubeFactory : MonoBehaviour
    {
        [SerializeField] private Challenge _challenge;
        [SerializeField] private GameObject _cubePrefab;

        private void Start()
        {
            _challenge.Count.Where(x => x % 2 == 0).Subscribe(_ =>
            {
                var pos = new Vector3(Random.Range(-3.0f, 3.0f), Random.Range(-3.0f, 3.0f));
                Instantiate(_cubePrefab, pos, Quaternion.identity);
            }).AddTo(this);
        }
    }
}